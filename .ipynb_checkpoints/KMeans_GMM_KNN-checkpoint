{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import absolute_import\n",
    "from __future__ import print_function\n",
    "from __future__ import division\n",
    "\n",
    "%matplotlib inline  \n",
    "\n",
    "import sys\n",
    "import matplotlib\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import axes3d\n",
    "\n",
    "np.random.seed(1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KMeans\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "KMeans is trying to solve the following optimization problem:\n",
    "\n",
    "\\begin{align}\n",
    "\\arg \\min_S \\sum_{i=1}^K \\sum_{x_j \\in S_i} ||x_j - \\mu_i||^2\n",
    "\\end{align}\n",
    "where one needs to partition the N observations into K clusters: $S = \\{S_1, S_2, \\ldots, S_K\\}$ and each cluster has $\\mu_i$ as its center.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class KMeans(object):\n",
    "    \n",
    "    def __init__(self):\n",
    "        pass\n",
    "    \n",
    "    def pairwise_dist(self, x, y): \n",
    "        #use euclidean distance to find dist where dist[i,j] = ||Xi - Yj|| \n",
    "        np.random.seed(1)   \n",
    "        dist = np.sqrt(np.sum((x[:, np.newaxis] - y[np.newaxis])**2, axis=2))\n",
    "        return dist\n",
    "    \n",
    "    def _init_centers(self, points, K, **kwargs): \n",
    "        #random points as initialized centers\n",
    "        np.random.seed(1)\n",
    "        centroids = points.copy()\n",
    "        np.random.shuffle(centroids)\n",
    "        return centroids[:K]\n",
    "        \n",
    "    def _update_assignment(self, centers, points): \n",
    "        #assign points to closest center\n",
    "        np.random.seed(1)     \n",
    "        dist = self.pairwise_dist(centers,points)\n",
    "        return np.argmin(dist, axis=0)        \n",
    "                \n",
    "    def _update_centers(self, old_centers, cluster_idx, points):\n",
    "        #update centers based on mean of clusters\n",
    "        np.random.seed(1)\n",
    "        return np.array([points[cluster_idx==k].mean(axis=0) for k in range(old_centers.shape[0])])\n",
    "        \n",
    "    def _get_loss(self, centers, cluster_idx, points): \n",
    "        #loss function to minimize\n",
    "        np.random.seed(1)  \n",
    "        loss = np.zeros(points.shape[0])\n",
    "        for i in range(centers.shape[0]):\n",
    "            loss[cluster_idx == i] = np.linalg.norm(points[cluster_idx == i] - centers[i],axis=1)\n",
    "        return np.sum((loss)**2)\n",
    "    \n",
    "    def __call__(self, points, K, max_iters=100, abs_tol=1e-16, rel_tol=1e-16, verbose=False, **kwargs):\n",
    "        centers = self._init_centers(points, K, **kwargs)\n",
    "        for it in range(max_iters):\n",
    "            cluster_idx = self._update_assignment(centers, points)\n",
    "            centers = self._update_centers(centers, cluster_idx, points)\n",
    "            loss = self._get_loss(centers, cluster_idx, points)\n",
    "            K = centers.shape[0]\n",
    "            if it:\n",
    "                diff = np.abs(prev_loss - loss)\n",
    "                if diff < abs_tol and diff / prev_loss < rel_tol:\n",
    "                    break\n",
    "            prev_loss = loss\n",
    "            if verbose:\n",
    "                print('iter %d, loss: %.4f' % (it, loss))\n",
    "        return cluster_idx, centers, loss\n",
    "    \n",
    "    def find_optimal_num_clusters(self, data, max_K=15):\n",
    "        #see how Kmeans performs with different number of clusters (loss function by iteration)\n",
    "        np.random.seed(1)\n",
    "        X = []\n",
    "        Y = []\n",
    "        for i in range(max_K):\n",
    "            cluuster_idx, centers, loss = self.__call__(data,i+1)\n",
    "            X = X + [i+1]\n",
    "            Y = Y + [loss]\n",
    "\n",
    "        plt.plot(X,Y)\n",
    "        return np.array(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_file():\n",
    "    data = np.zeros((187,5))\n",
    "    countries = []\n",
    "    cnt=0\n",
    "    with open(r'covid19_recovered_confirmed_deaths_082020.csv', 'r') as f:\n",
    "        for line in f:\n",
    "            country,recovered,confirmed,death,lat,lon = line.split(',')\n",
    "            data[cnt,:]=[recovered,confirmed,death,lat,lon]\n",
    "            countries.append(country)\n",
    "            cnt+=1\n",
    "    cnt=0\n",
    "    return data,countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualize (cluster_idx,centers,K,name_list,flag=0):\n",
    "   \n",
    "    num_list = [np.sum(np.array(cluster_idx) == i) for i in range(0,K)]\n",
    "\n",
    "    x =list(range(len(num_list)))\n",
    "    total_width, n = 0.8, 2\n",
    "    width = total_width / n\n",
    "    plt.figure(figsize=(10,5))\n",
    "    plt.title('Visualization for '+ str(K) + ' clusters', fontdict = {'fontsize' : 18})\n",
    "    plt.bar(x, num_list, width=width, label='number',tick_label = name_list, fc = 'orchid')\n",
    "\n",
    "    plt.legend()\n",
    "    for i in range(0, K):\n",
    "        if flag == 0:     \n",
    "            print('{0}: Average confirmed: {1:.2f}, Average Deathtoll: {2:.2f}.'.format(name_list[i], centers[i][0], centers[i][1])) \n",
    "        if flag == 1:\n",
    "            print('{0}: Average recovered: {1:.2f}, Average confirmed: {2:.2f}, Average Deathtoll: {3:.2f}.'.format(name_list[i], centers[i][0], centers[i][1], centers[i][2])) \n",
    "        data = list(np.array(countries)[np.where(cluster_idx==i)])\n",
    "        print('Total number of countries in {0}: {1}'.format(name_list[i], len(data)))\n",
    "        if len(data) > 10:\n",
    "            data = data[:10]\n",
    "        print(('{}   '*len(data)).format(*data))\n",
    "        print('\\n')\n",
    "    \n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster 1: Average confirmed: 2704795.29, Average Deathtoll: 4429822.62.\n",
      "Total number of countries in Cluster 1: 184\n",
      "Afghanistan   Albania   Algeria   Andorra   Angola   Antigua and Barbuda   Argentina   Armenia   Australia   Austria   \n",
      "\n",
      "\n",
      "Cluster 2: Average confirmed: 114476468.33, Average Deathtoll: 242568774.00.\n",
      "Total number of countries in Cluster 2: 3\n",
      "Brazil   India   US   \n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster 1: Average confirmed: 67424447.00, Average Deathtoll: 101308266.00.\n",
      "Total number of countries in Cluster 1: 2\n",
      "India   Russia   \n",
      "\n",
      "\n",
      "Cluster 2: Average confirmed: 129005629.50, Average Deathtoll: 300667433.00.\n",
      "Total number of countries in Cluster 2: 2\n",
      "Brazil   US   \n",
      "\n",
      "\n",
      "Cluster 3: Average confirmed: 4132179.44, Average Deathtoll: 7527867.22.\n",
      "Total number of countries in Cluster 3: 27\n",
      "Argentina   Bangladesh   Belarus   Belgium   Bolivia   Canada   Dominican Republic   Ecuador   Egypt   Indonesia   \n",
      "\n",
      "\n",
      "Cluster 4: Average confirmed: 424307.55, Average Deathtoll: 672968.22.\n",
      "Total number of countries in Cluster 4: 141\n",
      "Afghanistan   Albania   Algeria   Andorra   Angola   Antigua and Barbuda   Armenia   Australia   Austria   Azerbaijan   \n",
      "\n",
      "\n",
      "Cluster 5: Average confirmed: 18457025.07, Average Deathtoll: 29380090.20.\n",
      "Total number of countries in Cluster 5: 15\n",
      "Chile   China   Colombia   France   Germany   Iran   Italy   Mexico   Pakistan   Peru   \n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "name_list0 = ['Cluster 1','Cluster 2']\n",
    "name_list1 = ['Cluster 1','Cluster 2','Cluster 3','Cluster 4','Cluster 5']\n",
    "\n",
    "data, countries = read_file()\n",
    "cluster_idx2, centers2, loss2 = KMeans()(data, 2)\n",
    "visualize(cluster_idx2, centers2, 2, name_list0)\n",
    "\n",
    "cluster_idx5, centers5, loss5 = KMeans()(data, 5)\n",
    "visualize(cluster_idx5, centers5, 5, name_list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.72557709e+17, 6.80494556e+16, 3.94837821e+16, 2.61389704e+16,\n",
       "       2.48830519e+16, 2.42650223e+16, 2.41452528e+16, 2.41216572e+16,\n",
       "       2.40801334e+16, 2.40722868e+16, 2.40674922e+16, 2.40665651e+16,\n",
       "       2.40661511e+16, 2.40660976e+16, 2.40656728e+16])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Helper function for visualizing elbow method result on dataset2. You don't have to modify it\n",
    "KMeans().find_optimal_num_clusters(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. GMM  \n",
    "\n",
    "GMM uses MLE to optimize its parameters.</font> It approximates the distribution of data using a set of gaussian distributions. \n",
    "\n",
    "Given $N$ samples $X = [x_1, x_2, \\ldots, x_N]$, we are asked to find $K$ diagonal gaussian distributions to model the data $X$: \n",
    "\n",
    "\\begin{align}\n",
    "    \\max_{\\{\\mu_k, \\sigma_k\\}_{k=1}^K} \\sum_{i=1}^N \\log \\big( \\sum_{k=1}^{K} \\pi(k) \\mathcal{N}(x_i | \\mu_k, \\sigma_k)\\big)\n",
    "\\end{align}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GMM(object):\n",
    "    def __init__(self): # No need to implement\n",
    "        pass\n",
    "\n",
    "    #helper functions\n",
    "    def softmax(self,logits):\n",
    "        e = np.exp(logits - np.max(logits, axis=1).reshape((-1, 1)))\n",
    "        return  e / e.sum(axis=1).reshape((-1,1))\n",
    "\n",
    "    def logsumexp(self,logits):\n",
    "        e = np.exp(logits - np.max(logits, axis=1).reshape((-1, 1)))\n",
    "        sumE = e.sum(axis=1).reshape((-1,1))\n",
    "        logSE = np.log(sumE)\n",
    "        addBack = np.max(logits,axis=1)\n",
    "        return logSE + addBack\n",
    "            \n",
    "    def _init_components(self, points, K, **kwargs):\n",
    "        shape = points.shape\n",
    "        n, d = shape\n",
    "\n",
    "        # Initialize mixing coefficients pi\n",
    "        pi = np.full(K,1/K)\n",
    "        \n",
    "        # random initialization for mu from dataset\n",
    "        mu = points[np.random.randint(n,size=K)]\n",
    "        \n",
    "        # Initialize covariance\n",
    "        sigma = np.array([np.eye(d) for i in range(K) ])\n",
    "\n",
    "        return pi,mu,sigma\n",
    "        \n",
    "        \n",
    "    def _ll_joint(self, points, pi, mu, sigma):\n",
    "        #assunes independence\n",
    "        shape = points.shape\n",
    "        n, d = shape\n",
    "        k = len(pi)\n",
    "        \n",
    "        ll = np.zeros((n,k))\n",
    "        for i in range(k):\n",
    "            mu_i = points - mu[i,:]\n",
    "            var = np.linalg.det(sigma[i,:,:])\n",
    "            st_dev = np.sqrt(var)\n",
    "            dn = np.sqrt((2*np.pi) ** points.shape[1])\n",
    "            ex = np.sum((-1/2) * np.multiply((mu_i @ np.linalg.inv(sigma[i,:,:])).T, mu_i.T), axis=0)            \n",
    "            pdf = (1.0/((st_dev*dn))) * np.exp(ex)\n",
    "            logpi = np.log(pi[i] + 1e-32)\n",
    "            lognorm = np.log(pdf + 1e-32)\n",
    "            ll[:,i] = logpi + lognorm\n",
    "       \n",
    "        return ll\n",
    "\n",
    "\n",
    "    def _E_step(self, points, pi, mu, sigma):               \n",
    "        ll = self._ll_joint(points,pi,mu,sigma)\n",
    "        gamma = self.softmax(ll)\n",
    "        \n",
    "        return gamma\n",
    " \n",
    "    def _M_step(self, points, gamma):\n",
    "        # obtain the shapes\n",
    "        shape1 = points.shape\n",
    "        n, d = shape1\n",
    "        shape2 = gamma.shape\n",
    "        j, k = shape2\n",
    "\n",
    "        # compute n_k\n",
    "        n_k = np.sum(gamma,axis=0)\n",
    "        \n",
    "        pi = n_k / n\n",
    "        mu = gamma.T.dot(points) / (n_k[:,np.newaxis])\n",
    "        \n",
    "        sigma = []\n",
    "        for i in range(k):\n",
    "            diff = points - mu[i]\n",
    "            w_sum = np.diagonal(np.dot(gamma[:,i].T * diff.T,diff))\n",
    "            sigma_i = w_sum / n_k[i]\n",
    "            sigma_i = sigma_i * np.eye(d)\n",
    "            sigma.append(sigma_i)\n",
    "        sigma = np.array(sigma)\n",
    "        \n",
    "        return pi, mu, sigma    \n",
    "\n",
    "    def __call__(self, points, K, max_iters=100, abs_tol=1e-16, rel_tol=1e-16):\n",
    "\n",
    "        pi, mu, sigma = self._init_components(points, K)\n",
    "        for it in range(0,max_iters):\n",
    "            # E-step\n",
    "            gamma = self._E_step(points, pi, mu, sigma)\n",
    "            \n",
    "            # M-step\n",
    "            pi, mu, sigma = self._M_step(points, gamma)\n",
    "            \n",
    "            # calculate the negative log-likelihood of observation\n",
    "            joint_ll = self._ll_joint(points, pi, mu, sigma)\n",
    "            loss = -np.sum(self.logsumexp(joint_ll))\n",
    "            if it:\n",
    "                diff = np.abs(prev_loss - loss)\n",
    "                if diff < abs_tol and diff / prev_loss < rel_tol:\n",
    "                    break\n",
    "            prev_loss = loss\n",
    "            if it % 10 == 0:  print('iter %d, loss: %.4f' % (it, loss))\n",
    "        return gamma, (pi, mu, sigma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Image compression and pixel clustering\n",
    "\n",
    "Image compression is the idea of reducing the amount of data required to store/transmit digital images. Each intensity in a RGB plane of an image is represented by 8 bits of information. Therefore, the total number of colours that can be presented are $3 x 2^8$. Practically, we do not use all the available colour combinations to represent an image. \n",
    "We will use your GMM algorithm implementation to do pixel clustering and estimate how many colours can represent the given images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cluster_pixels_gmm(image, K):\n",
    "    im_height, im_width, im_channel = image.shape\n",
    "    flat_img = np.reshape(image, [-1, im_channel]).astype(np.float32)\n",
    "    gamma, (pi, mu, sigma) = GMM()(flat_img, K=K, max_iters=100)\n",
    "    cluster_ids = np.argmax(gamma, axis=1)\n",
    "    centers = mu\n",
    "    gmm_img = np.reshape(centers[cluster_ids], (im_height, im_width, im_channel))\n",
    "    return gmm_img\n",
    "\n",
    "def plot_images(img_list, title_list, figsize=(20, 10)):\n",
    "    assert len(img_list) == len(title_list)\n",
    "    fig, axes = plt.subplots(1, len(title_list), figsize=figsize)\n",
    "    for i, ax in enumerate(axes):\n",
    "        ax.imshow(img_list[i] / 255.0)\n",
    "        ax.set_title(title_list[i])\n",
    "        ax.axis('off')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'cluster_pixels_gmm' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 9\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[38;5;66;03m#plot_images = ([image,gmm_img],[\"Original\",\"Clusters = {}\".format(i)])\u001b[39;00m\n\u001b[1;32m      8\u001b[0m im \u001b[38;5;241m=\u001b[39m iio\u001b[38;5;241m.\u001b[39mv3\u001b[38;5;241m.\u001b[39mimread(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdunes.jpeg\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 9\u001b[0m \u001b[43mfind_n_colours\u001b[49m\u001b[43m(\u001b[49m\u001b[43mim\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[4], line 5\u001b[0m, in \u001b[0;36mfind_n_colours\u001b[0;34m(image, min_clusters, max_clusters)\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfind_n_colours\u001b[39m(image, min_clusters\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m, max_clusters\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m15\u001b[39m):\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(min_clusters,max_clusters\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m----> 5\u001b[0m         gmm_img \u001b[38;5;241m=\u001b[39m \u001b[43mcluster_pixels_gmm\u001b[49m(image,i)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'cluster_pixels_gmm' is not defined"
     ]
    }
   ],
   "source": [
    "import imageio as iio\n",
    "\n",
    "def find_n_colours(image, min_clusters=5, max_clusters=15):\n",
    "    for i in range(min_clusters,max_clusters+1):\n",
    "        gmm_img = cluster_pixels_gmm(image,i)\n",
    "        #plot_images = ([image,gmm_img],[\"Original\",\"Clusters = {}\".format(i)])\n",
    "        \n",
    "im = iio.v3.imread('dunes.jpeg')\n",
    "find_n_colours(im, 5, 10)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN\n",
    "The first step in this task is to clean the Labeled_materials_incomplete dataset by filling in the missing values with probable ones derived from complete data. A useful approach to this type of problem is using a k-nearest neighbors (k-NN) algorithm. For this application, the method consists of replacing the missing value of a given point with the mean of the closest k-neighbors to that point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CleanData(object):\n",
    "    def __init__(self): # No need to implement\n",
    "        pass\n",
    "    \n",
    "    def pairwise_dist(self, x, y): # [0pts] - copy from kmeans\n",
    "        np.random.seed(1)\n",
    "        dist = np.sqrt(np.sum((x[:, np.newaxis] - y[np.newaxis])**2, axis=2))\n",
    "        return dist\n",
    "        \n",
    "    def __call__(self, incomplete_points,  complete_points, K, **kwargs): # [10pts]\n",
    "        cleaned = list(complete_points)\n",
    "\n",
    "        for i in range(incomplete_points.shape[0]):\n",
    "            point = incomplete_points[i]\n",
    "            comp = []\n",
    "            for j in range(complete_points.shape[0]):\n",
    "                if complete_points[j][3] == point[3]:\n",
    "                    comp.append(complete_points[j])\n",
    "            comp = np.array(comp)\n",
    "            point_re = np.reshape(point, (1,point.shape[0]))\n",
    "            dist = self.pairwise_dist(point_re, comp)\n",
    "            kmeans = np.sum(comp[np.argpartition(dist[0], -K)[-K:]], axis=0) / K\n",
    "            for m in range(incomplete_points.shape[1]):\n",
    "                if not np.isnan(point[m]):\n",
    "                    continue\n",
    "                point[m] = kmeans[m]\n",
    "            cleaned.append(point)\n",
    "        clean_data = np.array(cleaned)\n",
    "\n",
    "        return clean_data              \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
